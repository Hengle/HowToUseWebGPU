!function(e){function t(t){for(var r,i,o=t[0],a=t[1],s=t[2],c=0,u=[];c<o.length;c++)i=o[c],Object.prototype.hasOwnProperty.call(B,i)&&B[i]&&u.push(B[i][0]),B[i]=0;for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);for(C&&C(t);u.length;)u.shift()();return D.push.apply(D,s||[]),n()}function n(){for(var e,t=0;t<D.length;t++){for(var n=D[t],r=!0,i=1;i<n.length;i++){var o=n[i];0!==B[o]&&(r=!1)}r&&(D.splice(t--,1),e=j(j.s=n[0]))}return e}var r=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!x[e]||!P[e])return;for(var n in P[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(v[n]=t[n]);0==--m&&0===b&&O()}(e,t),r&&r(e,t)};var i,o=!0,a="dcd7c726df50213e59ab",s={},c=[],u=[];function d(t){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:i!==t,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,f){case"idle":(v={})[t]=e[t],p("ready");break;case"ready":M(t);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(t)}},check:S,apply:U,status:function(e){if(!e)return f;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[t]};return i=void 0,n}var l=[],f="idle";function p(e){f=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var h,v,y,g,m=0,b=0,w={},P={},x={};function E(e){return+e+""===e?+e:e}function S(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=j.p+""+a+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p(T()?"ready":"idle"),null;P={},w={},x=e.c,y=e.h,p("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));for(var n in v={},B)_(n);return"prepare"===f&&0===b&&0===m&&O(),t}));var t}function _(e){x[e]?(P[e]=!0,m++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=j.p+""+e+"."+a+".hot-update.js",document.head.appendChild(t)}(e)):w[e]=!0}function O(){p("ready");var e=h;if(h=null,e)if(o)Promise.resolve().then((function(){return U(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in v)Object.prototype.hasOwnProperty.call(v,n)&&t.push(E(n));e.resolve(t)}}function U(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");return function t(n){var r,o,u,d,l;function f(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((d=G[o])&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var s=0;s<d.parents.length;s++){var c=d.parents[s],u=G[c];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([c]),moduleId:o,parentId:c};-1===t.indexOf(c)&&(u.hot._acceptedDependencies[o]?(n[c]||(n[c]=[]),h(n[c],[o])):(delete n[c],t.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}T();var m={},b=[],w={},P=function(){console.warn("[HMR] unexpected require("+_.moduleId+") to disposed module")};for(var S in v)if(Object.prototype.hasOwnProperty.call(v,S)){var _;l=E(S),_=v[S]?f(l):{type:"disposed",moduleId:S};var O=!1,U=!1,M=!1,D="";switch(_.chain&&(D="\nUpdate propagation: "+_.chain.join(" -> ")),_.type){case"self-declined":n.onDeclined&&n.onDeclined(_),n.ignoreDeclined||(O=new Error("Aborted because of self decline: "+_.moduleId+D));break;case"declined":n.onDeclined&&n.onDeclined(_),n.ignoreDeclined||(O=new Error("Aborted because of declined dependency: "+_.moduleId+" in "+_.parentId+D));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(_),n.ignoreUnaccepted||(O=new Error("Aborted because "+l+" is not accepted"+D));break;case"accepted":n.onAccepted&&n.onAccepted(_),U=!0;break;case"disposed":n.onDisposed&&n.onDisposed(_),M=!0;break;default:throw new Error("Unexception type "+_.type)}if(O)return p("abort"),Promise.reject(O);if(U)for(l in w[l]=v[l],h(b,_.outdatedModules),_.outdatedDependencies)Object.prototype.hasOwnProperty.call(_.outdatedDependencies,l)&&(m[l]||(m[l]=[]),h(m[l],_.outdatedDependencies[l]));M&&(h(b,[_.moduleId]),w[l]=P)}var A,L=[];for(o=0;o<b.length;o++)l=b[o],G[l]&&G[l].hot._selfAccepted&&w[l]!==P&&!G[l].hot._selfInvalidated&&L.push({module:l,parents:G[l].parents.slice(),errorHandler:G[l].hot._selfAccepted});p("dispose"),Object.keys(x).forEach((function(e){!1===x[e]&&function(e){delete B[e]}(e)}));var k,C,I=b.slice();for(;I.length>0;)if(l=I.pop(),d=G[l]){var H={},R=d.hot._disposeHandlers;for(u=0;u<R.length;u++)(r=R[u])(H);for(s[l]=H,d.hot.active=!1,delete G[l],delete m[l],u=0;u<d.children.length;u++){var V=G[d.children[u]];V&&((A=V.parents.indexOf(l))>=0&&V.parents.splice(A,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(d=G[l]))for(C=m[l],u=0;u<C.length;u++)k=C[u],(A=d.children.indexOf(k))>=0&&d.children.splice(A,1);p("apply"),void 0!==y&&(a=y,y=void 0);for(l in v=void 0,w)Object.prototype.hasOwnProperty.call(w,l)&&(e[l]=w[l]);var F=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(d=G[l])){C=m[l];var N=[];for(o=0;o<C.length;o++)if(k=C[o],r=d.hot._acceptedDependencies[k]){if(-1!==N.indexOf(r))continue;N.push(r)}for(o=0;o<N.length;o++){r=N[o];try{r(C)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:l,dependencyId:C[o],error:e}),n.ignoreErrored||F||(F=e)}}}for(o=0;o<L.length;o++){var z=L[o];l=z.module,c=z.parents,i=l;try{j(l)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:t,originalError:e}),n.ignoreErrored||F||(F=t),F||(F=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:l,error:e}),n.ignoreErrored||F||(F=e)}}if(F)return p("fail"),Promise.reject(F);if(g)return t(n).then((function(e){return b.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(b)}))}(t=t||{})}function T(){if(g)return v||(v={}),g.forEach(M),g=void 0,!0}function M(t){Object.prototype.hasOwnProperty.call(v,t)||(v[t]=e[t])}var G={},B={5:0},D=[];function j(t){if(G[t])return G[t].exports;var n=G[t]={i:t,l:!1,exports:{},hot:d(t),parents:(u=c,c=[],u),children:[]};return e[t].call(n.exports,n,n.exports,function(e){var t=G[e];if(!t)return j;var n=function(n){return t.hot.active?(G[n]?-1===G[n].parents.indexOf(e)&&G[n].parents.push(e):(c=[e],i=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),c=[]),j(n)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(t){j[e]=t}}};for(var o in j)Object.prototype.hasOwnProperty.call(j,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(n,o,r(o));return n.e=function(e){return"ready"===f&&p("prepare"),b++,j.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===f&&(w[e]||_(e),0===b&&0===m&&O())}},n.t=function(e,t){return 1&t&&(e=n(e)),j.t(e,-2&t)},n}(t)),n.l=!0,n.exports}j.m=e,j.c=G,j.d=function(e,t,n){j.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},j.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},j.t=function(e,t){if(1&t&&(e=j(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(j.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)j.d(n,r,function(t){return e[t]}.bind(null,r));return n},j.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(t,"a",t),t},j.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},j.p="",j.h=function(){return a};var A=window.webpackJsonp=window.webpackJsonp||[],L=A.push.bind(A);A.push=t,A=A.slice();for(var k=0;k<A.length;k++)t(A[k]);var C=L;D.push([14,0]),n()}({0:function(e,t,n){},1:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGPURenderEngin=void 0;var o=n(3),a=function(){function e(e){this.pipelines=[],this.clearColor={r:.25,g:.5,b:1,a:1},this.gpu=navigator.gpu,e instanceof HTMLCanvasElement?this.canvas=e:this.canvas=document.getElementById(e)}return e.prototype.init=function(){return r(this,void 0,void 0,(function(){var e,t,n,r,a;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,7,,8]),this.gpu?(e=this,[4,navigator.gpu.requestAdapter({powerPreference:"high-performance"})]):[3,5];case 1:return e.adapter=i.sent(),t=this,[4,this.adapter.requestDevice()];case 2:return t.device=i.sent(),this.canvas.width=this.canvas.parentElement.clientWidth,this.canvas.height=this.canvas.parentElement.clientHeight,this.context=this.canvas.getContext("gpupresent"),n=this,[4,this.context.getSwapChainPreferredFormat(this.device)];case 3:return n.swapChainTextureFormat=i.sent(),this.swapChain=this.context.configureSwapChain({device:this.device,format:this.swapChainTextureFormat,usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC}),r=this,[4,o.default()];case 4:return r.glslang=i.sent(),this.commandEncoder=this.device.createCommandEncoder(),this.depthTexture=this.device.createTexture({size:{width:this.canvas.width,height:this.canvas.height,depth:1},format:"depth24plus-stencil8",usage:GPUTextureUsage.OUTPUT_ATTACHMENT}),[2,!0];case 5:return[2,!1];case 6:return[3,8];case 7:return a=i.sent(),console.error(a),[2,!1];case 8:return[2]}}))}))},e.prototype.draw=function(e){this.commandEncoder=this.device.createCommandEncoder();var t={colorAttachments:[{attachment:this.swapChain.getCurrentTexture().createView(),loadValue:this.clearColor,storeOp:"store"}],depthStencilAttachment:{attachment:this.depthTexture.createView(),depthLoadValue:1,depthStoreOp:"store",stencilLoadValue:0,stencilStoreOp:"store"}};this.renderPassEncoder=this.commandEncoder.beginRenderPass(t);var n=this.pipelines[0];this.renderPassEncoder.setPipeline(n.pipeline),this.renderPassEncoder.setBindGroup(0,n.uniformBindGroup),this.renderPassEncoder.setViewport(0,0,this.canvas.width,this.canvas.height,0,1),this.renderPassEncoder.setScissorRect(0,0,this.canvas.width,this.canvas.height);for(var r=0;r<n.attributes.length;r++){var i=n.attributes[r].buffer;this.renderPassEncoder.setVertexBuffer(r,i)}n.indexLength>0?(this.renderPassEncoder.setIndexBuffer(n.indexBuffer),this.renderPassEncoder.drawIndexed(n.indexLength,1,0,0,0)):this.renderPassEncoder.draw(e,1,0,0),this.renderPassEncoder.endPass(),this.device.defaultQueue.submit([this.commandEncoder.finish()])},e}();t.WebGPURenderEngin=a},14:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),a=n(1),s=n(2);n(0);var c=new a.WebGPURenderEngin("renderCanvas"),u=new Float32Array([0,0,0,10,100,0,0,100,0,0,0,0,10,0,0,10,100,0,0,0,-10,0,100,-10,10,100,-10,0,0,-10,10,100,-10,10,0,-10,0,100,0,10,100,0,10,100,-10,0,100,0,10,100,-10,0,100,-10,0,0,0,10,0,-10,10,0,0,0,0,0,0,0,-10,10,0,-10,0,0,0,0,100,0,0,0,-10,0,0,-10,0,100,0,0,100,-10,10,10,0,10,10,-10,10,100,0,10,10,-10,10,100,-10,10,100,0,10,0,0,60,10,0,10,10,0,10,0,0,60,0,0,60,10,0,10,0,-10,10,10,-10,60,10,-10,10,0,-10,60,10,-10,60,0,-10,10,10,0,60,10,-10,10,10,-10,10,10,0,60,10,0,60,10,-10,10,0,0,10,0,-10,60,0,-10,10,0,0,60,0,-10,60,0,0,60,0,0,60,10,-10,60,10,0,60,0,0,60,0,-10,60,10,-10]),d=new Float32Array(new Float32Array([0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0])),l=o.mat4.perspective(o.mat4.create(),Math.PI/3.5,c.canvas.width/c.canvas.height,.01,1e4),f=o.mat4.lookAt(o.mat4.create(),o.vec3.fromValues(0,150,200),o.vec3.fromValues(0,50,0),o.vec3.fromValues(0,1,0)),p=o.mat4.fromTranslation(o.mat4.create(),o.vec3.fromValues(0,0,0)),h=o.mat4.mul(o.mat4.create(),p,f),v=new Float32Array(32);v.set(l),v.set(h,16);var y=null,g=function(){var e=y.getUniformEntryByBinding(0).resource.buffer;y.updateBuffer(e,0,m()),c.draw(u.length/3),requestAnimationFrame(g)},m=function(){return o.mat4.fromRotation(p,5e-4*(new Date).getTime(),o.vec3.fromValues(0,1,0)),o.mat4.mul(h,f,p),v.set(l),v.set(h,16),v};window.addEventListener("DOMContentLoaded",(function(){return r(void 0,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,c.init()];case 1:return e.sent()&&((y=new s.WebGPURenderPipeline(c,"#version 450\nlayout(set = 0, binding = 0) uniform Uniforms {\n    mat4 uProjectionMatrix;\n    mat4 uModelViewMatrix;\n};\n\nlayout(location = 0) in vec3 aPosition;\nlayout(location = 1) in vec3 aNormal;\n\nlayout(location = 0) out vec3 vNormal;\nvoid main() {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);\n    vNormal = aNormal;\n}","#version 450\n    precision highp float; \n    layout(location=0) in vec3 vNormal;\n\n    layout(location=0) out vec4 fragColor;\n\n    void main(){ \n        vec4 color = vec4(1, 0.7, 0.5, 1);  // 模型颜色\n        vec3 lightColor = vec3(0.1, 1, 1); //光源颜色\n        vec3 normal = normalize(vNormal); //法向量\n        vec3 dir = normalize(vec3(0.5,1.0,0.7)); //光源方向\n        float cosTheta = max(dot(normal, dir),0.0); // 计算夹角的cos值\n        vec3 diffuse = lightColor * vec3(color) * cosTheta;\n        fragColor  = vec4(diffuse,1.0);\n    }\n")).addAttribute(u),y.addAttribute(d),y.addUniformBuffer(v),y.generatePipline(),g()),[2]}}))}))}))},2:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGPURenderPipeline=void 0;var o=function(){function e(e,t,n){var r=this;this.attributes=[],this.uniformEntries=new Map,this.engin=e,this.engin.pipelines.push(this),this.vs=t,this.fs=n,this.vertModule=this.engin.device.createShaderModule({code:this.engin.glslang.compileGLSL(t,"vertex",!0),source:t,transform:function(e){return r.engin.glslang.compileGLSL(e,"vertex",!0)}}),this.fragModule=this.engin.device.createShaderModule({code:this.engin.glslang.compileGLSL(n,"fragment",!0),source:n,transform:function(e){return r.engin.glslang.compileGLSL(e,"fragment",!0)}})}return e.prototype.createBuffer=function(e,t){var n={size:e.byteLength,usage:t},r=this.engin.device.createBufferMapped(n),i=r[0],o=r[1];return new e.constructor(o).set(e),i.unmap(),i},e.prototype.updateBuffer=function(e,t,n){var r=this.engin.device.createBufferMapped({size:n.byteLength,usage:GPUBufferUsage.COPY_SRC}),i=r[0],o=r[1];new n.constructor(o).set(n),i.unmap(),this.engin.device.defaultQueue.writeBuffer(e,t,n,0,n.byteLength)},e.prototype.addAttribute=function(e,t){void 0===t&&(t=3);var n=this.createBuffer(e,GPUBufferUsage.VERTEX);this.attributes.push({buffer:n,componentSize:t})},e.prototype.setIndex=function(e){this.indexBuffer=this.createBuffer(e,GPUBufferUsage.INDEX),this.indexLength=e.length},e.prototype.addUniformEntry=function(e){this.uniformEntries.set(e.binding,e)},e.prototype.getUniformEntryByBinding=function(e){return this.uniformEntries.get(e)},e.prototype.addUniformBuffer=function(e,t){void 0===t&&(t=0);var n=this.createBuffer(e,GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST);this.addUniformEntry({binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,type:"uniform-buffer",resource:{buffer:n}})},e.prototype.addSampler=function(e,t,n){void 0===t&&(t="linear"),void 0===n&&(n="linear");var r=this.engin.device.createSampler({magFilter:t,minFilter:n,maxAnisotropy:4});this.addUniformEntry({binding:e,visibility:GPUShaderStage.FRAGMENT,type:"sampler",resource:r})},e.prototype.addTextureView=function(e,t,n){return void 0===n&&(n=!0),r(this,void 0,void 0,(function(){var r,o,a,s,c,u;return i(this,(function(i){switch(i.label){case 0:return r=new Image,n&&(r.crossOrigin="anonymous"),r.src=t,[4,r.decode()];case 1:return i.sent(),[4,createImageBitmap(r)];case 2:return o=i.sent(),a=this.engin.device.createTexture({size:{width:r.width,height:r.height,depth:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED}),s={imageBitmap:o},c={texture:a},u={width:r.width,height:r.height,depth:1},this.engin.device.defaultQueue.copyImageBitmapToTexture(s,c,u),o.close(),this.addUniformEntry({binding:e,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",resource:a.createView()}),[2]}}))}))},e.prototype.generateUniforms=function(){var e={entries:[]},t=[];this.uniformEntries.values;this.uniformEntries.forEach((function(n,r){e.entries.push({binding:n.binding,visibility:n.visibility,type:n.type}),t.push({binding:n.binding,resource:n.resource})})),this.uniformBindGroupLayout=this.engin.device.createBindGroupLayout(e),this.uniformBindGroup=this.engin.device.createBindGroup({layout:this.uniformBindGroupLayout,entries:t})},e.prototype.generatePipline=function(){this.generateUniforms(),this.vertexStage={module:this.vertModule,entryPoint:"main"},this.fragmentStage={module:this.fragModule,entryPoint:"main"},this.colorState={format:"bgra8unorm",colorBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},writeMask:GPUColorWrite.ALL},this.rasterizationState={},this.layout=this.engin.device.createPipelineLayout({bindGroupLayouts:[this.uniformBindGroupLayout]}),this.vertexState={indexFormat:"uint16",vertexBuffers:this.getVertexBufferDesc()},this.pipelineDesc={layout:this.layout,vertexStage:this.vertexStage,fragmentStage:this.fragmentStage,primitiveTopology:"triangle-list",colorStates:[this.colorState],vertexState:this.vertexState,depthStencilState:{depthWriteEnabled:!0,depthCompare:"less",format:"depth24plus-stencil8"},rasterizationState:this.rasterizationState},this.pipeline=this.engin.device.createRenderPipeline(this.pipelineDesc)},e.prototype.getVertexBufferDesc=function(){return this.attributes.map((function(e,t){return{attributes:[{shaderLocation:t,offset:0,format:"float"+e.componentSize}],arrayStride:4*e.componentSize,stepMode:"vertex"}}))},e}();t.WebGPURenderPipeline=o}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,