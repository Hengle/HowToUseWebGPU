!function(e){function t(t){for(var r,i,o=t[0],a=t[1],s=t[2],c=0,u=[];c<o.length;c++)i=o[c],Object.prototype.hasOwnProperty.call(G,i)&&G[i]&&u.push(G[i][0]),G[i]=0;for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r]);for(L&&L(t);u.length;)u.shift()();return T.push.apply(T,s||[]),n()}function n(){for(var e,t=0;t<T.length;t++){for(var n=T[t],r=!0,i=1;i<n.length;i++){var o=n[i];0!==G[o]&&(r=!1)}r&&(T.splice(t--,1),e=j(j.s=n[0]))}return e}var r=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!P[e]||!x[e])return;for(var n in x[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(v[n]=t[n]);0==--m&&0===b&&U()}(e,t),r&&r(e,t)};var i,o=!0,a="e4af881b507045488e0e",s={},c=[],u=[];function d(t){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:i!==t,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)n._acceptedDependencies[e[r]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,f){case"idle":(v={})[t]=e[t],p("ready");break;case"ready":B(t);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(t)}},check:_,apply:O,status:function(e){if(!e)return f;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:s[t]};return i=void 0,n}var l=[],f="idle";function p(e){f=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var h,v,y,g,m=0,b=0,w={},x={},P={};function E(e){return+e+""===e?+e:e}function _(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=j.p+""+a+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p(M()?"ready":"idle"),null;x={},w={},P=e.c,y=e.h,p("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));for(var n in v={},G)S(n);return"prepare"===f&&0===b&&0===m&&U(),t}));var t}function S(e){P[e]?(x[e]=!0,m++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=j.p+""+e+"."+a+".hot-update.js",document.head.appendChild(t)}(e)):w[e]=!0}function U(){p("ready");var e=h;if(h=null,e)if(o)Promise.resolve().then((function(){return O(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in v)Object.prototype.hasOwnProperty.call(v,n)&&t.push(E(n));e.resolve(t)}}function O(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");return function t(n){var r,o,u,d,l;function f(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((d=D[o])&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var s=0;s<d.parents.length;s++){var c=d.parents[s],u=D[c];if(u){if(u.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([c]),moduleId:o,parentId:c};-1===t.indexOf(c)&&(u.hot._acceptedDependencies[o]?(n[c]||(n[c]=[]),h(n[c],[o])):(delete n[c],t.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}M();var m={},b=[],w={},x=function(){console.warn("[HMR] unexpected require("+S.moduleId+") to disposed module")};for(var _ in v)if(Object.prototype.hasOwnProperty.call(v,_)){var S;l=E(_),S=v[_]?f(l):{type:"disposed",moduleId:_};var U=!1,O=!1,B=!1,T="";switch(S.chain&&(T="\nUpdate propagation: "+S.chain.join(" -> ")),S.type){case"self-declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(U=new Error("Aborted because of self decline: "+S.moduleId+T));break;case"declined":n.onDeclined&&n.onDeclined(S),n.ignoreDeclined||(U=new Error("Aborted because of declined dependency: "+S.moduleId+" in "+S.parentId+T));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(S),n.ignoreUnaccepted||(U=new Error("Aborted because "+l+" is not accepted"+T));break;case"accepted":n.onAccepted&&n.onAccepted(S),O=!0;break;case"disposed":n.onDisposed&&n.onDisposed(S),B=!0;break;default:throw new Error("Unexception type "+S.type)}if(U)return p("abort"),Promise.reject(U);if(O)for(l in w[l]=v[l],h(b,S.outdatedModules),S.outdatedDependencies)Object.prototype.hasOwnProperty.call(S.outdatedDependencies,l)&&(m[l]||(m[l]=[]),h(m[l],S.outdatedDependencies[l]));B&&(h(b,[S.moduleId]),w[l]=x)}var k,I=[];for(o=0;o<b.length;o++)l=b[o],D[l]&&D[l].hot._selfAccepted&&w[l]!==x&&!D[l].hot._selfInvalidated&&I.push({module:l,parents:D[l].parents.slice(),errorHandler:D[l].hot._selfAccepted});p("dispose"),Object.keys(P).forEach((function(e){!1===P[e]&&function(e){delete G[e]}(e)}));var A,L,C=b.slice();for(;C.length>0;)if(l=C.pop(),d=D[l]){var V={},H=d.hot._disposeHandlers;for(u=0;u<H.length;u++)(r=H[u])(V);for(s[l]=V,d.hot.active=!1,delete D[l],delete m[l],u=0;u<d.children.length;u++){var R=D[d.children[u]];R&&((k=R.parents.indexOf(l))>=0&&R.parents.splice(k,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(d=D[l]))for(L=m[l],u=0;u<L.length;u++)A=L[u],(k=d.children.indexOf(A))>=0&&d.children.splice(k,1);p("apply"),void 0!==y&&(a=y,y=void 0);for(l in v=void 0,w)Object.prototype.hasOwnProperty.call(w,l)&&(e[l]=w[l]);var F=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(d=D[l])){L=m[l];var q=[];for(o=0;o<L.length;o++)if(A=L[o],r=d.hot._acceptedDependencies[A]){if(-1!==q.indexOf(r))continue;q.push(r)}for(o=0;o<q.length;o++){r=q[o];try{r(L)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:l,dependencyId:L[o],error:e}),n.ignoreErrored||F||(F=e)}}}for(o=0;o<I.length;o++){var z=I[o];l=z.module,c=z.parents,i=l;try{j(l)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:t,originalError:e}),n.ignoreErrored||F||(F=t),F||(F=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:l,error:e}),n.ignoreErrored||F||(F=e)}}if(F)return p("fail"),Promise.reject(F);if(g)return t(n).then((function(e){return b.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(b)}))}(t=t||{})}function M(){if(g)return v||(v={}),g.forEach(B),g=void 0,!0}function B(t){Object.prototype.hasOwnProperty.call(v,t)||(v[t]=e[t])}var D={},G={4:0},T=[];function j(t){if(D[t])return D[t].exports;var n=D[t]={i:t,l:!1,exports:{},hot:d(t),parents:(u=c,c=[],u),children:[]};return e[t].call(n.exports,n,n.exports,function(e){var t=D[e];if(!t)return j;var n=function(n){return t.hot.active?(D[n]?-1===D[n].parents.indexOf(e)&&D[n].parents.push(e):(c=[e],i=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),c=[]),j(n)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return j[e]},set:function(t){j[e]=t}}};for(var o in j)Object.prototype.hasOwnProperty.call(j,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(n,o,r(o));return n.e=function(e){return"ready"===f&&p("prepare"),b++,j.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===f&&(w[e]||S(e),0===b&&0===m&&U())}},n.t=function(e,t){return 1&t&&(e=n(e)),j.t(e,-2&t)},n}(t)),n.l=!0,n.exports}j.m=e,j.c=D,j.d=function(e,t,n){j.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},j.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},j.t=function(e,t){if(1&t&&(e=j(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(j.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)j.d(n,r,function(t){return e[t]}.bind(null,r));return n},j.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return j.d(t,"a",t),t},j.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},j.p="",j.h=function(){return a};var k=window.webpackJsonp=window.webpackJsonp||[],I=k.push.bind(k);k.push=t,k=k.slice();for(var A=0;A<k.length;A++)t(k[A]);var L=I;T.push([13,0]),n()}({0:function(e,t,n){},13:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(4),a=n(2),s=n(3);n(0);var c=new a.WebGPURenderEngin("renderCanvas"),u=new Float32Array([.5,-.5,0,-.5,-.5,0,-.5,.5,0,.5,.5,0]),d=new Float32Array([1,1,0,1,0,0,1,0]),l=new Uint16Array([0,1,2,0,2,3]),f=o.mat4.perspective(o.mat4.create(),Math.PI/3.5,c.canvas.width/c.canvas.height,.01,1e4),p=o.mat4.lookAt(o.mat4.create(),o.vec3.fromValues(0,0,1.2),o.vec3.fromValues(0,0,-1),o.vec3.fromValues(0,1,0)),h=o.mat4.fromTranslation(o.mat4.create(),o.vec3.fromValues(0,0,0)),v=o.mat4.mul(o.mat4.create(),h,p),y=new Float32Array(32);y.set(f),y.set(v,16);var g=null,m=function(){var e=g.getUniformEntryByBinding(0).resource.buffer;g.updateBuffer(e,0,b()),c.draw(),requestAnimationFrame(m)},b=function(){return o.mat4.fromRotation(h,5e-4*(new Date).getTime(),o.vec3.fromValues(0,1,0)),o.mat4.mul(v,p,h),y.set(f),y.set(v,16),y};window.addEventListener("DOMContentLoaded",(function(){return r(void 0,void 0,void 0,(function(){return i(this,(function(e){switch(e.label){case 0:return[4,c.init()];case 1:return e.sent()?((g=new s.WebGPURenderPipeline(c,"#version 450\nlayout(set = 0, binding = 0) uniform Uniforms {\n    mat4 uProjectionMatrix;\n    mat4 uModelViewMatrix;\n};\n\nlayout(location = 0) in vec3 aPosition;\nlayout(location = 1) in vec2 aUV;\n\nlayout(location = 0) out vec2 vUV;\nvoid main() {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);\n    vUV = aUV;\n}","#version 450\n    precision highp float;\n    layout(set=0, binding=1) uniform sampler uSampler;\n    layout(set=0, binding=2) uniform texture2D uTexture0; \n    layout(location=0) in vec2 vUV;\n\n    layout(location=0) out vec4 fragColor;\n\n    void main(){ \n        fragColor = texture(sampler2D(uTexture0, uSampler), vUV);\n    }\n")).addAttribute(u),g.addAttribute(d,2),g.setIndex(l),g.addUniformBuffer(y),g.addSampler(1),[4,g.addTextureView(2,"https://cdn.linhongxu.com/uv_grid_opengl.jpg")]):[3,3];case 2:e.sent(),g.generatePipline(),m(),e.label=3;case 3:return[2]}}))}))}))},2:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGPURenderEngin=void 0;var o=n(1),a=function(){function e(e){this.pipelines=[],this.clearColor={r:.25,g:.5,b:1,a:1},this.gpu=navigator.gpu,e instanceof HTMLCanvasElement?this.canvas=e:this.canvas=document.getElementById(e)}return e.prototype.init=function(){return r(this,void 0,void 0,(function(){var e,t,n,r,a;return i(this,(function(i){switch(i.label){case 0:return i.trys.push([0,7,,8]),this.gpu?(e=this,[4,navigator.gpu.requestAdapter({powerPreference:"high-performance"})]):[3,5];case 1:return e.adapter=i.sent(),t=this,[4,this.adapter.requestDevice()];case 2:return t.device=i.sent(),this.canvas.width=this.canvas.parentElement.clientWidth,this.canvas.height=this.canvas.parentElement.clientHeight,this.context=this.canvas.getContext("gpupresent"),n=this,[4,this.context.getSwapChainPreferredFormat(this.device)];case 3:return n.swapChainTextureFormat=i.sent(),this.swapChain=this.context.configureSwapChain({device:this.device,format:this.swapChainTextureFormat,usage:GPUTextureUsage.OUTPUT_ATTACHMENT|GPUTextureUsage.COPY_SRC}),r=this,[4,o.default()];case 4:return r.glslang=i.sent(),this.commandEncoder=this.device.createCommandEncoder(),[2,!0];case 5:return[2,!1];case 6:return[3,8];case 7:return a=i.sent(),console.error(a),[2,!1];case 8:return[2]}}))}))},e.prototype.draw=function(){this.commandEncoder=this.device.createCommandEncoder();var e={colorAttachments:[{attachment:this.swapChain.getCurrentTexture().createView(),loadValue:this.clearColor,storeOp:"store"}]};this.renderPassEncoder=this.commandEncoder.beginRenderPass(e);var t=this.pipelines[0];this.renderPassEncoder.setPipeline(t.pipeline),this.renderPassEncoder.setViewport(0,0,this.canvas.width,this.canvas.height,0,1),this.renderPassEncoder.setScissorRect(0,0,this.canvas.width,this.canvas.height);for(var n=0;n<t.attributes.length;n++){var r=t.attributes[n].buffer;this.renderPassEncoder.setVertexBuffer(n,r)}this.renderPassEncoder.setIndexBuffer(t.indexBuffer),this.renderPassEncoder.setBindGroup(0,t.uniformBindGroup),this.renderPassEncoder.drawIndexed(t.indexLength,1,0,0,0),this.renderPassEncoder.endPass(),this.device.defaultQueue.submit([this.commandEncoder.finish()])},e}();t.WebGPURenderEngin=a},3:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebGPURenderPipeline=void 0;var o=function(){function e(e,t,n){var r=this;this.attributes=[],this.uniformEntries=new Map,this.engin=e,this.engin.pipelines.push(this),this.vs=t,this.fs=n,this.vertModule=this.engin.device.createShaderModule({code:this.engin.glslang.compileGLSL(t,"vertex",!0),source:t,transform:function(e){return r.engin.glslang.compileGLSL(e,"vertex",!0)}}),this.fragModule=this.engin.device.createShaderModule({code:this.engin.glslang.compileGLSL(n,"fragment",!0),source:n,transform:function(e){return r.engin.glslang.compileGLSL(e,"fragment",!0)}})}return e.prototype.createBuffer=function(e,t){var n={size:e.byteLength,usage:t},r=this.engin.device.createBufferMapped(n),i=r[0],o=r[1];return new e.constructor(o).set(e),i.unmap(),i},e.prototype.updateBuffer=function(e,t,n){var r=this.engin.device.createBufferMapped({size:n.byteLength,usage:GPUBufferUsage.COPY_SRC}),i=r[0],o=r[1];new n.constructor(o).set(n),i.unmap(),this.engin.device.defaultQueue.writeBuffer(e,t,n,0,n.byteLength)},e.prototype.addAttribute=function(e,t){void 0===t&&(t=3);var n=this.createBuffer(e,GPUBufferUsage.VERTEX);this.attributes.push({buffer:n,componentSize:t})},e.prototype.setIndex=function(e){this.indexBuffer=this.createBuffer(e,GPUBufferUsage.INDEX),this.indexLength=e.length},e.prototype.addUniformEntry=function(e){this.uniformEntries.set(e.binding,e)},e.prototype.getUniformEntryByBinding=function(e){return this.uniformEntries.get(e)},e.prototype.addUniformBuffer=function(e,t){void 0===t&&(t=0);var n=this.createBuffer(e,GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST);this.addUniformEntry({binding:0,visibility:GPUShaderStage.VERTEX,type:"uniform-buffer",resource:{buffer:n}})},e.prototype.addSampler=function(e,t,n){void 0===t&&(t="linear"),void 0===n&&(n="linear");var r=this.engin.device.createSampler({magFilter:t,minFilter:n,maxAnisotropy:4});this.addUniformEntry({binding:e,visibility:GPUShaderStage.FRAGMENT,type:"sampler",resource:r})},e.prototype.addTextureView=function(e,t,n){return void 0===n&&(n=!0),r(this,void 0,void 0,(function(){var r,o,a,s,c,u;return i(this,(function(i){switch(i.label){case 0:return r=new Image,n&&(r.crossOrigin="anonymous"),r.src=t,[4,r.decode()];case 1:return i.sent(),[4,createImageBitmap(r)];case 2:return o=i.sent(),a=this.engin.device.createTexture({size:{width:r.width,height:r.height,depth:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.SAMPLED}),s={imageBitmap:o},c={texture:a},u={width:r.width,height:r.height,depth:1},this.engin.device.defaultQueue.copyImageBitmapToTexture(s,c,u),o.close(),this.addUniformEntry({binding:e,visibility:GPUShaderStage.FRAGMENT,type:"sampled-texture",resource:a.createView()}),[2]}}))}))},e.prototype.generateUniforms=function(){var e={entries:[]},t=[];this.uniformEntries.values;this.uniformEntries.forEach((function(n,r){e.entries.push({binding:n.binding,visibility:n.visibility,type:n.type}),t.push({binding:n.binding,resource:n.resource})})),this.uniformBindGroupLayout=this.engin.device.createBindGroupLayout(e),this.uniformBindGroup=this.engin.device.createBindGroup({layout:this.uniformBindGroupLayout,entries:t})},e.prototype.generatePipline=function(){this.generateUniforms(),this.vertexStage={module:this.vertModule,entryPoint:"main"},this.fragmentStage={module:this.fragModule,entryPoint:"main"},this.colorState={format:"bgra8unorm",colorBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},writeMask:GPUColorWrite.ALL},this.rasterizationState={frontFace:"cw",cullMode:"none"},this.layout=this.engin.device.createPipelineLayout({bindGroupLayouts:[this.uniformBindGroupLayout]}),this.vertexState={indexFormat:"uint16",vertexBuffers:this.getVertexBufferDesc()},this.pipelineDesc={layout:this.layout,vertexStage:this.vertexStage,fragmentStage:this.fragmentStage,primitiveTopology:"triangle-list",colorStates:[this.colorState],vertexState:this.vertexState,rasterizationState:this.rasterizationState},this.pipeline=this.engin.device.createRenderPipeline(this.pipelineDesc)},e.prototype.getVertexBufferDesc=function(){return this.attributes.map((function(e,t){return{attributes:[{shaderLocation:t,offset:0,format:"float"+e.componentSize}],arrayStride:4*e.componentSize,stepMode:"vertex"}}))},e}();t.WebGPURenderPipeline=o}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,