!function(e){function t(t){for(var n,o,a=t[0],i=t[1],c=t[2],d=0,u=[];d<a.length;d++)o=a[d],Object.prototype.hasOwnProperty.call(I,o)&&I[o]&&u.push(I[o][0]),I[o]=0;for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n]);for(T&&T(t);u.length;)u.shift()();return A.push.apply(A,c||[]),r()}function r(){for(var e,t=0;t<A.length;t++){for(var r=A[t],n=!0,o=1;o<r.length;o++){var a=r[o];0!==I[a]&&(n=!1)}n&&(A.splice(t--,1),e=k(k.s=r[0]))}return e}var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!O[e]||!_[e])return;for(var r in _[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(v[r]=t[r]);0==--m&&0===b&&j()}(e,t),n&&n(e,t)};var o,a=!0,i="dcd7c726df50213e59ab",c={},d=[],u=[];function l(t){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:o!==t,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,f){case"idle":(v={})[t]=e[t],p("ready");break;case"ready":M(t);break;case"prepare":case"check":case"dispose":case"apply":(w=w||[]).push(t)}},check:x,apply:D,status:function(e){if(!e)return f;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var t=s.indexOf(e);t>=0&&s.splice(t,1)},data:c[t]};return o=void 0,r}var s=[],f="idle";function p(e){f=e;for(var t=0;t<s.length;t++)s[t].call(null,e)}var h,v,y,w,m=0,b=0,g={},_={},O={};function P(e){return+e+""===e?+e:e}function x(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return a=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,o=k.p+""+i+".hot-update.json";n.open("GET",o,!0),n.timeout=t,n.send(null)}catch(e){return r(e)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+o+" timed out."));else if(404===n.status)e();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(n.responseText)}catch(e){return void r(e)}e(t)}}}))).then((function(e){if(!e)return p(S()?"ready":"idle"),null;_={},g={},O=e.c,y=e.h,p("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));for(var r in v={},I)E(r);return"prepare"===f&&0===b&&0===m&&j(),t}));var t}function E(e){O[e]?(_[e]=!0,m++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=k.p+""+e+"."+i+".hot-update.js",document.head.appendChild(t)}(e)):g[e]=!0}function j(){p("ready");var e=h;if(h=null,e)if(a)Promise.resolve().then((function(){return D(a)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var r in v)Object.prototype.hasOwnProperty.call(v,r)&&t.push(P(r));e.resolve(t)}}function D(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");return function t(r){var n,a,u,l,s;function f(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),a=o.id,i=o.chain;if((l=H[a])&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var c=0;c<l.parents.length;c++){var d=l.parents[c],u=H[d];if(u){if(u.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([d]),moduleId:a,parentId:d};-1===t.indexOf(d)&&(u.hot._acceptedDependencies[a]?(r[d]||(r[d]=[]),h(r[d],[a])):(delete r[d],t.push(d),n.push({chain:i.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function h(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}S();var m={},b=[],g={},_=function(){console.warn("[HMR] unexpected require("+E.moduleId+") to disposed module")};for(var x in v)if(Object.prototype.hasOwnProperty.call(v,x)){var E;s=P(x),E=v[x]?f(s):{type:"disposed",moduleId:x};var j=!1,D=!1,M=!1,A="";switch(E.chain&&(A="\nUpdate propagation: "+E.chain.join(" -> ")),E.type){case"self-declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(j=new Error("Aborted because of self decline: "+E.moduleId+A));break;case"declined":r.onDeclined&&r.onDeclined(E),r.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+E.moduleId+" in "+E.parentId+A));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(E),r.ignoreUnaccepted||(j=new Error("Aborted because "+s+" is not accepted"+A));break;case"accepted":r.onAccepted&&r.onAccepted(E),D=!0;break;case"disposed":r.onDisposed&&r.onDisposed(E),M=!0;break;default:throw new Error("Unexception type "+E.type)}if(j)return p("abort"),Promise.reject(j);if(D)for(s in g[s]=v[s],h(b,E.outdatedModules),E.outdatedDependencies)Object.prototype.hasOwnProperty.call(E.outdatedDependencies,s)&&(m[s]||(m[s]=[]),h(m[s],E.outdatedDependencies[s]));M&&(h(b,[E.moduleId]),g[s]=_)}var U,L=[];for(a=0;a<b.length;a++)s=b[a],H[s]&&H[s].hot._selfAccepted&&g[s]!==_&&!H[s].hot._selfInvalidated&&L.push({module:s,parents:H[s].parents.slice(),errorHandler:H[s].hot._selfAccepted});p("dispose"),Object.keys(O).forEach((function(e){!1===O[e]&&function(e){delete I[e]}(e)}));var C,T,G=b.slice();for(;G.length>0;)if(s=G.pop(),l=H[s]){var B={},F=l.hot._disposeHandlers;for(u=0;u<F.length;u++)(n=F[u])(B);for(c[s]=B,l.hot.active=!1,delete H[s],delete m[s],u=0;u<l.children.length;u++){var q=H[l.children[u]];q&&((U=q.parents.indexOf(s))>=0&&q.parents.splice(U,1))}}for(s in m)if(Object.prototype.hasOwnProperty.call(m,s)&&(l=H[s]))for(T=m[s],u=0;u<T.length;u++)C=T[u],(U=l.children.indexOf(C))>=0&&l.children.splice(U,1);p("apply"),void 0!==y&&(i=y,y=void 0);for(s in v=void 0,g)Object.prototype.hasOwnProperty.call(g,s)&&(e[s]=g[s]);var R=null;for(s in m)if(Object.prototype.hasOwnProperty.call(m,s)&&(l=H[s])){T=m[s];var V=[];for(a=0;a<T.length;a++)if(C=T[a],n=l.hot._acceptedDependencies[C]){if(-1!==V.indexOf(n))continue;V.push(n)}for(a=0;a<V.length;a++){n=V[a];try{n(T)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:s,dependencyId:T[a],error:e}),r.ignoreErrored||R||(R=e)}}}for(a=0;a<L.length;a++){var X=L[a];s=X.module,d=X.parents,o=s;try{k(s)}catch(e){if("function"==typeof X.errorHandler)try{X.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:t,originalError:e}),r.ignoreErrored||R||(R=t),R||(R=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:s,error:e}),r.ignoreErrored||R||(R=e)}}if(R)return p("fail"),Promise.reject(R);if(w)return t(r).then((function(e){return b.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(b)}))}(t=t||{})}function S(){if(w)return v||(v={}),w.forEach(M),w=void 0,!0}function M(t){Object.prototype.hasOwnProperty.call(v,t)||(v[t]=e[t])}var H={},I={2:0},A=[];function k(t){if(H[t])return H[t].exports;var r=H[t]={i:t,l:!1,exports:{},hot:l(t),parents:(u=d,d=[],u),children:[]};return e[t].call(r.exports,r,r.exports,function(e){var t=H[e];if(!t)return k;var r=function(r){return t.hot.active?(H[r]?-1===H[r].parents.indexOf(e)&&H[r].parents.push(e):(d=[e],o=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),d=[]),k(r)},n=function(e){return{configurable:!0,enumerable:!0,get:function(){return k[e]},set:function(t){k[e]=t}}};for(var a in k)Object.prototype.hasOwnProperty.call(k,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(r,a,n(a));return r.e=function(e){return"ready"===f&&p("prepare"),b++,k.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===f&&(g[e]||E(e),0===b&&0===m&&j())}},r.t=function(e,t){return 1&t&&(e=r(e)),k.t(e,-2&t)},r}(t)),r.l=!0,r.exports}k.m=e,k.c=H,k.d=function(e,t,r){k.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},k.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},k.t=function(e,t){if(1&t&&(e=k(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(k.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)k.d(r,n,function(t){return e[t]}.bind(null,n));return r},k.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return k.d(t,"a",t),t},k.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},k.p="",k.h=function(){return i};var U=window.webpackJsonp=window.webpackJsonp||[],L=U.push.bind(U);U.push=t,U=U.slice();for(var C=0;C<U.length;C++)t(U[C]);var T=L;A.push([7,0]),r()}([function(e,t,r){},,,,,,,function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,a){function i(e){try{d(n.next(e))}catch(e){a(e)}}function c(e){try{d(n.throw(e))}catch(e){a(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,c)}d((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,n=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=r(8),i=r(9),c=r(3);r(0);window.addEventListener("DOMContentLoaded",(function(){return n(void 0,void 0,void 0,(function(){var e,t,r,n,d,u,l,s,f,p,h,v,y,w,m,b,g,_,O,P,x,E,j,D,S,M,H;return o(this,(function(o){switch(o.label){case 0:return navigator.gpu?[4,navigator.gpu.requestAdapter({powerPreference:"high-performance"})]:(document.getElementById("notSupport").style.display="",[2]);case 1:return[4,o.sent().requestDevice()];case 2:return e=o.sent(),(t=document.querySelector("#renderCanvas")).width=window.innerWidth,t.height=window.innerHeight,[4,(r=t.getContext("gpupresent")).getSwapChainPreferredFormat(e)];case 3:return n=o.sent(),d=r.configureSwapChain({device:e,format:n,usage:GPUTextureUsage.OUTPUT_ATTACHMENT}),[4,c.default()];case 4:return u=o.sent(),l=e.createCommandEncoder(),s={r:.25,g:.5,b:1,a:1},f={colorAttachments:[{attachment:d.getCurrentTexture().createView(),loadValue:s}]},p=l.beginRenderPass(f),h=new Float32Array([1,-1,0,-1,-1,0,0,1,0]),v=new Float32Array([1,0,0,0,1,0,0,0,1]),y=new Uint16Array([0,1,2]),m=(w=function(t,r){var n={size:t.byteLength,usage:r},o=e.createBufferMapped(n),a=o[0],i=o[1];return(t instanceof Uint16Array?new Uint16Array(i):new Float32Array(i)).set(t),a.unmap(),a})(h,GPUBufferUsage.VERTEX),b=w(v,GPUBufferUsage.VERTEX),g=w(y,GPUBufferUsage.INDEX),_=e.createShaderModule({code:u.compileGLSL(a.default,"vertex",!0),source:a.default,transform:function(e){return u.compileGLSL(e,"vertex",!0)}}),O=e.createShaderModule({code:u.compileGLSL(i.default,"fragment",!0),source:i.default,transform:function(e){return u.compileGLSL(e,"fragment",!0)}}),P={indexFormat:"uint16",vertexBuffers:[{attributes:[{shaderLocation:0,offset:0,format:"float3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float3"}],arrayStride:12,stepMode:"vertex"}]},x={module:_,entryPoint:"main"},E={module:O,entryPoint:"main"},j={format:"bgra8unorm",alphaBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},colorBlend:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha",operation:"add"},writeMask:GPUColorWrite.ALL},D={frontFace:"cw",cullMode:"none"},S=e.createPipelineLayout({bindGroupLayouts:[]}),M={layout:S,vertexStage:x,fragmentStage:E,primitiveTopology:"triangle-list",colorStates:[j],vertexState:P,rasterizationState:D},H=e.createRenderPipeline(M),p.setPipeline(H),p.setViewport(0,0,t.clientWidth,t.clientHeight,0,1),p.setScissorRect(0,0,t.clientWidth,t.clientHeight),p.setVertexBuffer(0,m),p.setVertexBuffer(1,b),p.setIndexBuffer(g),p.drawIndexed(3,1,0,0,0),p.endPass(),e.defaultQueue.submit([l.finish()]),[2]}}))}))}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="#version 450 \n\nlayout(location = 0) in vec3 aPosition;\nlayout(location = 1) in vec4 aColor;\n\nlayout(location = 0) out vec4 vColor;\nvoid main() {\n    gl_Position = vec4(aPosition, 1.0);\n    vColor = aColor;\n}"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="#version 450\nlayout(location = 0) in vec4 vColor;\nlayout(location = 0) out vec4 outColor;\nvoid main(void) {\n  outColor = vColor;\n}"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,